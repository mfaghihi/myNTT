#include <NTL/BasicThreadPool.h>
#include <NTL/FFT.h>
#include <NTL/GF2E.h>
#include <NTL/GF2EX.h>
#include <NTL/GF2X.h>
#include <NTL/GF2XFactoring.h>
#include <NTL/tools.h>
#include <NTL/vector.h>
#include <NTL/vec_lzz_p.h>
#include <NTL/ZZ.h>
#include <NTL/lzz_p.h>
#include <NTL/lzz_pX.h>
#include <NTL/FFT_impl.h>
#include <NTL/lzz_p.h>

#include <algorithm>
#include <cstdint>
#include <forward_list>
#include <fstream>
#include <iostream>
#include <ostream>
#include <memory>
#include <mutex>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <NTL/ZZ_pXFactoring.h>
#include <chrono> 
using namespace std::chrono; 

using namespace std;
using namespace NTL;

using NTL::ZZ;
using NTL::zz_p;
typedef NTL::zz_p lzz_p;
using NTL::zz_pX;
typedef NTL::zz_pX lzz_pX;
using NTL::vec_zz_p;
typedef NTL::vec_zz_p vec_lzz_p;
typedef NTL::ZZ word;
using NTL::Vec;

NTL::FFTPrimeInfo* fft_info;

std::pair<Vec<ZZ>,Vec<ZZ>> findprimefators(const ZZ input)
{	
	Vec<ZZ> results;
	Vec<ZZ> powers;
	ZZ tmp = input;
	long j = 0;
	if (tmp % 2 == 0){
		results.append(ZZ(2));
		powers.append(ZZ(1));
		tmp/=2;
		while (tmp % 2 == 0)
		{
			powers[0]++;
			tmp/=2;
		}
	}
	ZZ tmp2=tmp;
	for (ZZ i(3) ; i < tmp+1 ; i+=2)
	{
		if (tmp % i == 0){
			results.append(i);
			powers.append(ZZ(1));
			j++;
			tmp/=i;
			while (tmp % i == 0)
			{
				powers[j]++;
				tmp/=i;
			}
		}

	}
	/*cout<<input <<" = ";
	for (long i = 0 ; i < results.length() ; i ++){
		cout <<results[i]<<"^"<<powers[i];
		if (i!=results.length()-1)
			cout<<" x ";
	}
	cout << endl;*/
	return std::make_pair(results, powers);
}

void findnthRoot(ZZ_p &nth, ZZ_p n, ZZ p){
	ZZ_p result;
	random(result);
	while(result==ZZ_p(0))
	{
		random(result);
	}
	long n1;
	conv (n1,n);
	long p1;
    //conv(n1,n);
	conv(p1,p);
	// If n|(p-1), then there exists n-th root of unity x which must satisfy x^((p-1)/n)!=1.
	// Later we check if x^t != 1 for t < n.
	while (power(result,(p1-1)/n1) == ZZ_p(1))
	{
		random(result);
		cout <<result<<endl;
	}
	cout<< power(result,(p1-1)/n1)<<" is a possible "<< n1<<"th root of unity"<<endl;
	nth=power(result,(p1-1)/n1);
	//return power(result,(p1-1)/n1);
	
}

ZZ_p findGenerator(ZZ p,ZZ_p result=ZZ_p(1)){

	//ZZ_p result(2);
	ZZ Nm1 = p-1;
	//Vec<ZZ> factors;
	//Vec<ZZ> powers;
	pair< Vec<ZZ> , Vec<ZZ> > factors = findprimefators(Nm1);
	long length =factors.first.length();
	bool isGen=true;
	//cout<<"here findgenerator"<< factors.first <<endl;
	do
	{
		result=result+1;

		//cout<<"here findgenerator"<<endl;

		//random(result);

		//while(result==ZZ_p(0))
		//{
			//random(result);

		//}
		isGen=true;
		for (long i = 0 ; i < length ; i++ )
		{
			//cout<<"here findgenerator2"<< factors.second <<endl;
			if  ((power(result,Nm1/factors.first[i]) == ZZ_p(1)))
			{
				isGen=false;
				break;
			}

		}	
		
	}while (!isGen);
	
	cout<< result <<" is generator"<<endl;
	return result;
	
}

bool isPrimRootOfUnity(ZZ_p n,const ZZ_p root, ZZ p)
{
	pair< Vec<ZZ> , Vec<ZZ> > factors = findprimefators(p-1);
	long n1;
	conv(n1,n);
	//vector<ZZ>::iterator ptr;
	//vector<ZZ>::iterator power;
	ZZ powers;
	ZZ factor;
	for (long j=0; j < factors.first.length(); j++ ){
		factor=factors.first[j];
		powers=factors.second[j];
		//conv(powers,factors.second[j]); 
		//j++;
		for (long i = 1; i< powers; i++){
			if (power(factor,i)>n1-1) // If the possible order is more than (n1-1)
				break;
			else {
				if (power(root,power(factor,i))==1)
				{
					cout<< root <<" is not "<< n <<"th prime root of unity but is"<< power(factor,i)<<"th root of unity"<<endl;
					cout<< factor <<" ^ "<< i<<"<= " <<n1-1 <<endl;
					return false;
				}
			}
		}
	}
	
	// Check if x^t != 1 for t < n
	/*for (long i =1; i<n1;i++)
	{
		//cout <<" i =  "<<i <<endl;
		if (power(root,i)==1)
		{
			cout<< root <<" is not "<< n <<"th root of unity"<<endl;
			return false;
		}
	}*/
	if ((power(root,n1)==ZZ_p(1)))
	{
	cout<< root <<" is "<< n <<"th prime root of unity"<<endl;
	return true;
	}

	cout<< root <<" is not "<< n <<"th root of unity"<<endl;
	return false;
}

//void Printres(vector)

void polyToShares(ZZ_pX& poly,
                   NTL::Vec<NTL::ZZ_p>& shares, ZZ_p a) {
	long order=512;  // order of the root
    long log_order=9;
    long size =64;
	poly.SetLength(size);
  	shares.SetLength(size);
    //NTL::FFTPrimeInfo* fft_info;
   // fft_info = new NTL::FFTPrimeInfo();
		long a1;
		conv(a1,a);
	//cout <<"Here 2.0"<<endl;

	//InitFFTPrimeInfo(*fft_info, 4611686018326724609, a1, 0);
		//cout <<"Here 2.01"<<endl;

	auto start = high_resolution_clock::now(); 
	//for (long i = 0; i<100;i++)
		//{
			//cout <<"Here 2.1"<<endl;
			NTL::new_fft((long*)shares.begin(), (long*)poly.rep.begin(), log_order,
		*fft_info, size, size);
		//}
					//cout <<"Here 2.2"<<endl;

	auto stop = high_resolution_clock::now(); 

	auto duration = duration_cast<microseconds>(stop - start); 
  
	// To get the value of duration use the count() 
	// member function on the duration object 
	//cout <<"duration = "<< duration.count() << endl; 
	//cout<<"shares= ";
	//for (int i=0;i<size;i++){
	//	cout<< shares[i]<< " ";
	//}
	//cout<<endl;
	}

void secrettopoly(const Vec<ZZ_p>& secrets, Vec<ZZ_p>& share,
                                ZZ_pX* poly,ZZ_p a){
	ZZ_pX buf;
  if (poly == nullptr) {
    poly = &buf;
  }
	long size=64;
	long log_order=9;
	Vec<ZZ_p> images;
  	images.SetLength(size);
  	for (int i = 0; i < size; i++) {
    	images[i] = secrets[i];
  	}
	share.SetLength(size);
	poly->SetLength(size);
	//cout <<"Here 2.1"<<endl;
	NTL::new_ifft((long*)poly->rep.begin(), (long*)images.begin(),log_order,
                *fft_info, size);

	//cout <<"Here 2.2"<<endl;
	//poly->normalize();
	/*cout<<"poly= ";
	for (int i =0; i<size;i++)
 		cout<<poly->rep[i]<<" ";
	cout<<endl;*/
	 polyToShares(*poly, share, a);
}

ZZ findPrimeWithFactores(long factor1,long factor2=1)
{
	long factor =factor1*factor2;
	ZZ tmp(factor);
	ZZ p=tmp+1;
	Vec<ZZ> primes;
	bool isprime = false;
	while(!isprime)
	{
		for (long i=3; i<50000000;i+=1)
		{
		if(NTL::ProbPrime(p)){

			if (p< 4611686018326724609){ // just having an upperbound for prime number
			primes.append(p);
			isprime = true;
			}
			//break;
			//cout<<"i= "<<i<<endl;
		}
		//tmp=tmp*2;
		p=tmp*i+1;
	//	if(NTL::ProbPrime(p))
	//		break;
	//	tmp=tmp*3;
	//	p=tmp+1;
		}
		cout<<"not found!"<<endl;

	}
	 ZZ maxprime(0);
	 
	 for (long i=0; i<primes.length();i++){
		 if (maxprime <primes[i])	
		 	maxprime = primes[i];
	 }
	/*Vec<ZZ> Numbers;
	//conv(Numbers
	//cout<< Numbers<<endl;
	long sizeNumbers=Numbers.length();
	cout<<"sizeNumbers= "<<sizeNumbers<<endl;
	long index=0;
	ZZ factor3(factor);
	for (long i=0;i<sizeNumbers;i++)
		{
			if ((Numbers[i]-1)%factor1==0)
			{
				cout << "the prime from list is: "<<Numbers[i]<<endl;
				break;
			}
		}*/

	return maxprime;
}

// Generate a prime p number s.t. p-1 has at least the factors  factor1 and factor1. it can have more factors 
ZZ findPrimeWithFactores(ZZ factor1,ZZ factor2=ZZ(1))
{
	ZZ factor =factor1*factor2;
	ZZ tmp=factor;
	ZZ p=tmp+1;
	Vec<ZZ> primes;
	bool isprime = false;
	while(!isprime)
	{
		for (long i=129; i<50000000;i+=1)//change the starting i to adjust the desired number of bits in the prime number
		{
		if(NTL::ProbPrime(p)){

			
			primes.append(p);
			isprime = true;
		
			break;
			//cout<<"i= "<<i<<endl;
		}
		//tmp=tmp*2;
		p=tmp*i+1;
	//	if(NTL::ProbPrime(p))
	//		break;
	//	tmp=tmp*3;
	//	p=tmp+1;
		}
		//cout<<"not found!"<<endl;

	}

	return primes[0];
}


int main()
{
	long degree=63;
	ofstream myfile;
	myfile.open ("test.txt");
  	myfile << "Writing this to a file.\n";

	  ZZ twoten(1024);
	  ZZ twopower(1);
	  for (int i=0; i<9;i++)
	  twopower=twopower*twoten;	
	  twopower=twopower*32;
	  //twopower=twopower*twopower;
	//cout <<"twopower is= " << twopower<< endl;

	ZZ theprime=findPrimeWithFactores(twopower,ZZ(43046721));
	cout <<"theprime is= " << theprime<< endl;
	//return 0;
   ZZ p(4610415792919412737);
   //ZZ p(4611686018309947393);
   // 4606759634479349760 = 2^22 × 3^22 × 5 × 7
   // 4610415792919412736 = 2^20 × 3^20 × 13 × 97
   //ZZ p(11);
   //cin >> p;
   	//cout<<"here"<<endl;

   ZZ_p::init(theprime);
   // size of input vector to NTT
   long n1=512; 
   //long n1=5;
	ZZ_p n(n1);
   ZZ_p Nm1;//(4610415792919412736);
   conv(Nm1,theprime-1);
   cout << "Nm1 ="<<Nm1<<endl;
	//findprimefators((p-1)*(p-1));

   //ZZ_p Nm1(4611686018309947392); // p-1 (or N-1)
   //ZZ_p Nm1(10);
   //cin >> Nm1;
	//ZZ_p k=Nm1/n;
	//long k;
	ZZ k;
	conv(k,Nm1/n);
	//conv(k,576460752290840576);
   //Vec< Pair< ZZ_pX, long > > factors;

   //CanZass(factors, f);  // calls "Cantor/Zassenhaus" algorithm
   //cout <<"f/"<< n <<"= "<< Nm1/n << "\n";
   cout<<"k= "<<k<<endl;
   //ZZ_p a(18495196423556860);//=findGenerator(4610415792919412737);// use factors from https://www.alpertron.com.ar/ECM.HTM
	ZZ_p theGenerator =findGenerator(theprime,ZZ_p(2));

   ZZ_p a;// =findGenerator(ZZ(4610415792919412737));
   //cout<< a <<" is generator"<<endl;
   ZZ_p nth=power(theGenerator,k);
   //ZZ_p nth1=findnthRoot(n,p);
	cout<<"here :: "<<power(nth,n1)<<endl;
	cout<<"nth= "<<nth<<endl;
	//return 0;
	//nth=nth-1;
   //make sure nth is a primitive root of unity
   //myfile<< nth <<" is "<< n <<"th root of unity "<< power(nth,n1)<<endl;
   ZZ seed(1112);
   //cout<<isPrimRootOfUnity(n,nth,theprime)<<endl;
  // return 0;
   while (!isPrimRootOfUnity(n,nth,theprime))
   {
	   //NTL::SetSeed(seed);
	   nth.zero();
	   findnthRoot(nth,n,theprime);
	   cout << seed << " is seed"<<endl;
	   seed++;
   }
   //return 0;
	// Input vector
	Vec<ZZ_p> X;
	//conv(X,"[28242313 60369787 26821352 707636 31300454 38710545 68665486 25767172 34018410 52396947 66485126 20710657 59189197 8909111 60111186 2479862 15780325 46995328 41390258 23321871 57043873 46818189 59368841 37820285 39378538 34883425 63516991 57374755 17574093 22880381 9937958 54143610]");
	X.SetLength(n1);
	/*X[0]= ZZ_p(6);
	X[1]= ZZ_p(0);
	X[2]= ZZ_p(10);
	X[3]= ZZ_p(7);
	X[4]= ZZ_p(2);*/
	
	//nth=ZZ_p(3);

	//Output vector of NTT
	Vec<ZZ_p> Y;
	Y.SetLength(n1);

	//Compute NTT
	ZZ_p tmp;
	for (long i = 0; i<n1; i++)
	{
		X[i] = (random_ZZ_p());
	}
	//cout <<"X ="<< X<<endl;

	Vec<ZZ_p> W;
	W.SetLength(n1);
	for (long k = 0; k<n1; k++)
	{
		tmp = 0;
		tmp += power(ZZ_p(3125141995714774395),-k);
	
		W[k]=tmp;
	}
	//cout <<"W ="<< W<<endl;

	for (long k = 0; k<n1; k++)
	{
		tmp = 0;
			for (long i = 0; i<n1; i++)
		{
			tmp += X[i]*power(nth,i*k);
		}
		Y[k]=tmp;
	}
	//cout <<endl<<"+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+="<<endl;
	//cout <<"+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+="<<endl;
	//cout <<"+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+="<<endl<<endl;

	//cout <<"Y ="<< Y<<endl;

	//Output vector of invNTT
	Vec<ZZ_p> Z;
	Z.SetLength(n1);
	//Compute invNTT
	for (long k = 0; k<n1; k++)
	{
		tmp = 0;
		for (long i = 0; i<n1; i++)
		{
			tmp += Y[i]*power(nth,-i*k);
		}
		Z[k]=tmp/n1;
	}
	//cout <<"Z ="<< Z<<endl;
	
	cout <<"Z-X ="<< Z-X<<endl;
	
	//cout<<"a generator is: "<<f<<endl;


		//cout <<"Here 0"<<endl;

    fft_info = new NTL::FFTPrimeInfo();
		//cout <<"Here 00"<<endl;
		//ZZ_p a1;
		long a1;
		conv(a1,a);
	InitFFTPrimeInfo(*fft_info, 4611686018326724609, a1, 0);
	ZZ_pX poly;
	//ZZ_pX buf;
	//poly = &buf;

	long order=512;  // order of the root
    long log_order=9;
	long size = degree + 1;	//zz_pX buf;
    //poly->SetLength(size);
	
	//cout <<"Here 1"<<endl;
	//Vec<ZZ_p> share;
	//share.SetLength(size);
	Vec<ZZ_p> images;
	images.SetLength(size);
	//cout<<"images[i]=" <<" ";
	for (long i = 0; i<size; i++)
	{
			//cout <<"i=" << i<<endl;

		//conv(images[i],4285050990392141267);// = (random_zz_p());
		images[i]= random_ZZ_p();
		//cout<<images[i]<<" ";
	}
	//cout <<"Here 1.1"<<endl;

  //NTL::new_ifft((long*)poly->rep.begin(), (long*)images.begin(), log_order,
  //              *fft_info, size);
				//cout <<"Here 2"<<endl;
  /*for (int i = 0; i < size; i++) {
    poly->rep[i] =
        NTL::MulModPrecon(poly->rep[i]._ZZ_p__rep, rootTable[order - i], prime,
                          precondTable[order - i]);
  }*/
	//cout <<"Here 1.2"<<endl;
	//poly->normalize();
	//cout<<"poly= ";
	//for (int i =0; i<size;i++)
 	//	cout<<poly->rep[i]<<" ";
	//cout<<endl;
	//secrettopoly(images, share, &poly,a);
	 //polyToShares(*poly, share, a);
	//cout <<"Here 1.3"<<endl;
	//char t;
	//cin>> t;
	return 0;
	
}
